#!/usr/bin/env python3
"""
Script de migraci√≥n para convertir el sistema AgentRagMCP 
de configuraci√≥n hardcodeada a sistema din√°mico
"""

import os
import sys
import yaml
import json
import shutil
from pathlib import Path
from typing import Dict, List, Any

# A√±adir el directorio ra√≠z al path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from agentragmcp.core.dynamic_config import ConfigManager

class AgentRagMCPMigrator:
    """Migrador del sistema AgentRagMCP a configuraci√≥n din√°mica"""
    
    def __init__(self, base_path: str = None):
        self.base_path = Path(base_path) if base_path else Path.cwd()
        self.config_manager = ConfigManager(str(self.base_path / "data" / "configs"))
        
        print(f"üîÑ Iniciando migraci√≥n en: {self.base_path}")
    
    def migrate_full_system(self):
        """Migra todo el sistema al nuevo formato"""
        print("\n" + "="*60)
        print("üöÄ MIGRACI√ìN COMPLETA A SISTEMA DIN√ÅMICO")
        print("="*60)
        
        steps = [
            ("üìÅ Crear estructura de directorios", self.setup_directory_structure),
            ("üìã Migrar configuraciones RAG", self.migrate_rag_configs),
            ("ü§ñ Migrar configuraciones de agentes", self.migrate_agent_configs),
            ("üìö Crear ejemplos personalizados", self.create_custom_examples),
            ("‚úÖ Validar migraci√≥n", self.validate_migration),
            ("üìñ Crear documentaci√≥n", self.create_migration_docs)
        ]
        
        for step_name, step_func in steps:
            print(f"\n{step_name}...")
            try:
                step_func()
                print(f"‚úÖ {step_name} completado")
            except Exception as e:
                print(f"‚ùå Error en {step_name}: {e}")
                raise
        
        print(f"\nüéâ ¬°Migraci√≥n completada exitosamente!")
        print(f"üìç Configuraciones en: {self.config_manager.config_base_path}")
    
    def setup_directory_structure(self):
        """Crea la estructura de directorios para el sistema din√°mico"""
        directories = [
            "data/configs/rags",
            "data/configs/agents",
            "data/configs/custom",
            "data/documents/eco_agriculture",
            "data/documents/urban_gardening", 
            "data/documents/permaculture",
            "data/vectorstores/eco_agriculture",
            "data/vectorstores/urban_gardening",
            "data/vectorstores/permaculture",
            "agentragmcp/custom_agents"
        ]
        
        for directory in directories:
            dir_path = self.base_path / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"   üìÅ {directory}")
        
        # Crear archivo __init__.py para custom_agents
        init_file = self.base_path / "agentragmcp" / "custom_agents" / "__init__.py"
        if not init_file.exists():
            init_file.write_text("# Custom agents module\n")
    
    def migrate_rag_configs(self):
        """Migra las configuraciones RAG hardcodeadas a archivos individuales"""
        
        # Configuraci√≥n base extra√≠da del c√≥digo existente
        rag_configs = {
            "plants": {
                "display_name": "Plantas y Bot√°nica General",
                "description": "Informaci√≥n general sobre plantas, cultivo, cuidados y bot√°nica",
                "enabled": True,
                "priority": 1,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/plants",
                    "collection_name": "plants_collection",
                    "chunk_size": 1000,
                    "chunk_overlap": 200,
                    "embedding_model": "llama3.1",
                    "embedding_base_url": "http://localhost:11434"
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 5,
                    "fetch_k": 20,
                    "lambda_mult": 0.7,
                    "score_threshold": 0.5
                },
                "system_prompt": """Eres un especialista en bot√°nica y plantas. Tu conocimiento incluye:

**Especialidades principales:**
- Informaci√≥n bot√°nica general de plantas
- Cuidados y t√©cnicas de cultivo
- Caracter√≠sticas de especies espec√≠ficas (especialmente Malus domestica, Prunus cerasus, Vitis vinifera, Citrus aurantium, Prunus persica, Fragaria vesca, Solanum lycopersicum, Psidium guajava, Syzygium cumini, Citrus limon, Mangifera indica, Punica granatum, Prunus armeniaca, Vaccinium macrocarpon, Pyrus communis)
- T√©cnicas de jardiner√≠a y horticultura

**Instrucciones de respuesta:**
- Proporciona informaci√≥n pr√°ctica y cient√≠ficamente fundamentada
- Incluye consejos de cuidado cuando sea relevante
- Menciona condiciones ambientales necesarias
- Responde en espa√±ol de Espa√±a, de forma clara y educativa

{context}""",
                "categories": ["bot√°nica_general", "cultivo_plantas", "cuidados_plantas", "especies_espec√≠ficas"],
                "keywords": {
                    "primary": ["planta", "cultivo", "bot√°nica", "jard√≠n", "especie"],
                    "secondary": ["cuidado", "riego", "fertilizaci√≥n", "poda", "reproducci√≥n"]
                },
                "source_paths": ["./data/documents/plants"],
                "custom_settings": {
                    "specific_species": [
                        "Malus domestica", "Prunus cerasus", "Vitis vinifera", 
                        "Citrus aurantium", "Prunus persica", "Fragaria vesca", 
                        "Solanum lycopersicum", "Psidium guajava", "Syzygium cumini",
                        "Citrus limon", "Mangifera indica", "Punica granatum",
                        "Prunus armeniaca", "Vaccinium macrocarpon", "Pyrus communis"
                    ]
                }
            },
            
            "pathology": {
                "display_name": "Patolog√≠as y Enfermedades de Plantas",
                "description": "Diagn√≥stico, tratamiento y prevenci√≥n de enfermedades y plagas en plantas",
                "enabled": True,
                "priority": 1,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/pathology",
                    "collection_name": "pathology_collection",
                    "chunk_size": 800,
                    "chunk_overlap": 150,
                    "embedding_model": "llama3.1"
                },
                "retrieval": {
                    "search_type": "similarity_score_threshold",
                    "k": 7,
                    "score_threshold": 0.4
                },
                "system_prompt": """Eres un especialista en fitopatolog√≠a y sanidad vegetal. Tu experiencia incluye:

**Especialidades principales:**
- Diagn√≥stico de enfermedades de plantas
- Identificaci√≥n de plagas y pat√≥genos
- Tratamientos fitosanitarios
- Estrategias de prevenci√≥n y control integrado
- Patolog√≠as espec√≠ficas en Malus domestica, Vitis vinifera, Citrus aurantium, Solanum lycopersicum

**Instrucciones de respuesta:**
- Proporciona diagn√≥sticos basados en s√≠ntomas descritos
- Recomienda tratamientos apropiados y seguros
- Incluye medidas preventivas
- Advierte sobre el uso seguro de productos fitosanitarios

**IMPORTANTE:** Siempre incluye advertencias de seguridad para productos qu√≠micos.

{context}""",
                "categories": ["diagn√≥stico_enfermedades", "identificaci√≥n_plagas", "tratamientos_fitosanitarios", "prevenci√≥n_patolog√≠as"],
                "keywords": {
                    "primary": ["enfermedad", "plaga", "s√≠ntomas", "tratamiento", "control"],
                    "secondary": ["hongo", "bacteria", "virus", "insecto", "prevenci√≥n"]
                },
                "source_paths": ["./data/documents/pathology"],
                "custom_settings": {
                    "target_species": ["Malus domestica", "Vitis vinifera", "Citrus aurantium", "Solanum lycopersicum"],
                    "safety_warnings": True
                }
            },
            
            "general": {
                "display_name": "Conocimiento General de Plantas",
                "description": "Informaci√≥n educativa y divulgativa sobre el mundo vegetal",
                "enabled": True,
                "priority": 2,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/general",
                    "collection_name": "general_collection",
                    "chunk_size": 1200,
                    "chunk_overlap": 250
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 4,
                    "fetch_k": 15,
                    "lambda_mult": 0.8
                },
                "system_prompt": """Eres un educador y divulgador cient√≠fico especializado en bot√°nica.

**Especialidades principales:**
- Educaci√≥n bot√°nica general
- Divulgaci√≥n cient√≠fica del mundo vegetal
- Conceptos fundamentales de biolog√≠a vegetal
- Historia natural y evoluci√≥n de plantas

**Instrucciones de respuesta:**
- Explica conceptos complejos de manera accesible
- Proporciona ejemplos concretos y analog√≠as
- Incluye datos curiosos e interesantes
- Responde de forma clara, educativa y motivadora

{context}""",
                "categories": ["educaci√≥n_bot√°nica", "conceptos_b√°sicos", "divulgaci√≥n_cient√≠fica"],
                "keywords": {
                    "primary": ["qu√© es", "c√≥mo funciona", "por qu√©", "explicar", "bot√°nica"],
                    "secondary": ["definici√≥n", "concepto", "informaci√≥n", "curiosidades", "aprender"]
                },
                "source_paths": ["./data/documents/general"]
            }
        }
        
        # Guardar cada configuraci√≥n en su archivo
        rags_path = self.config_manager.config_base_path / "rags"
        for rag_name, config in rag_configs.items():
            config_file = rags_path / f"{rag_name}.yaml"
            with open(config_file, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True, indent=2)
            print(f"   üìÑ {rag_name}.yaml")
        
        print(f"   ‚úÖ {len(rag_configs)} configuraciones RAG migradas")
    
    def migrate_agent_configs(self):
        """Migra las configuraciones de agentes hardcodeadas"""
        
        agents_config = {
            "agents": {
                "plants": {
                    "description": "Especialista en informaci√≥n general de plantas, cultivo y bot√°nica",
                    "class": "PlantsAgent",
                    "topics": ["plants"],
                    "enabled": True,
                    "priority": 1,
                    "config": {
                        "max_confidence": 1.0,
                        "min_confidence": 0.1,
                        "fallback_enabled": False,
                        "primary_keywords": [
                            "planta", "plantas", "√°rbol", "√°rboles", "cultivo", "cultivar",
                            "sembrar", "plantar", "jard√≠n", "huerto", "bot√°nica", "especie",
                            "fruto", "hoja", "flor", "ra√≠z", "crecimiento", "cuidado"
                        ],
                        "patterns": [
                            "c√≥mo.*cultivar", "cu√°ndo.*plantar", "qu√©.*planta",
                            "caracter√≠sticas.*de", "cuidados.*de", "informaci√≥n.*sobre"
                        ],
                        "target_species": [
                            "Malus domestica", "Prunus cerasus", "Vitis vinifera",
                            "Citrus aurantium", "Prunus persica", "Fragaria vesca",
                            "Solanum lycopersicum"
                        ],
                        "common_names": [
                            "manzano", "manzana", "cerezo", "cereza", "vid", "uva",
                            "naranjo", "naranja", "tomate", "tomatera"
                        ]
                    }
                },

                "pathology": {
                    "description": "Especialista en patolog√≠as, enfermedades, plagas y tratamientos de plantas",
                    "class": "PathologyAgent",
                    "topics": ["pathology"],
                    "enabled": True,
                    "priority": 2,
                    "config": {
                        "max_confidence": 1.0,
                    }
                },
                
                "pathology": {
                    "description": "Especialista en patolog√≠as, enfermedades, plagas y tratamientos de plantas",
                    "class": "PathologyAgent",
                    "topics": ["pathology"],
                    "enabled": True,
                    "priority": 2,
                    "config": {
                        "max_confidence": 1.0,
                        "min_confidence": 0.1,
                        "fallback_enabled": False,
                        "primary_keywords": [
                            "enfermedad", "enfermedades", "patolog√≠a", "patolog√≠as",
                            "plaga", "plagas", "hongo", "hongos", "bacteria", "bacterias",
                            "virus", "tratamiento", "s√≠ntomas", "control", "mancha", "manchas"
                        ],
                        "patterns": [
                            "qu√©.*enfermedad", "c√≥mo.*tratar", "s√≠ntomas.*de",
                            "problema.*con", "se.*est√°.*muriendo", "hojas.*amarillas"
                        ],
                        "target_species": [
                            "Malus domestica", "Vitis vinifera", 
                            "Citrus aurantium", "Solanum lycopersicum"
                        ]
                    },
                    "thresholds": {
                        "keyword_weight": 0.5,
                        "symptom_weight": 0.3,
                        "species_weight": 0.3,
                        "pattern_weight": 0.4
                    }
                },
                
                "general": {
                    "description": "Asistente general para consultas diversas sobre plantas y bot√°nica",
                    "class": "GeneralAgent",
                    "topics": ["general"],
                    "enabled": True,
                    "priority": 3,
                    "config": {
                        "max_confidence": 0.8,
                        "min_confidence": 0.1,
                        "fallback_enabled": True,
                        "primary_keywords": [
                            "qu√© es", "qu√© son", "c√≥mo funciona", "por qu√©",
                            "explicar", "definir", "bot√°nica", "informaci√≥n"
                        ],
                        "patterns": [
                            "qu√©.*es.*la?", "c√≥mo.*funciona", "por.*qu√©.*las?.*plantas",
                            "diferencia.*entre", "tipos.*de.*plantas"
                        ]
                    },
                    "thresholds": {
                        "base_confidence": 0.2,
                        "educational_bonus": 0.3,
                        "general_bonus": 0.2
                    }
                }
            },
            
            "selector": {
                "selection_method": "hybrid",
                "rule_based": {
                    "enabled": True,
                    "confidence_threshold": 0.3
                },
                "llm_based": {
                    "enabled": True,
                    "min_agents_for_llm": 3,
                    "temperature": 0.1
                },
                "hybrid": {
                    "primary_method": "rule_based",
                    "fallback_method": "llm_based",
                    "llm_threshold": 0.5
                }
            },
            
            "metrics": {
                "track_agent_performance": True,
                "track_selection_accuracy": True,
                "log_confidence_scores": True,
                "alerts": {
                    "low_success_rate": 0.5,
                    "high_error_rate": 0.2
                }
            }
        }
        
        # Guardar configuraci√≥n de agentes
        agents_file = self.config_manager.config_base_path / "agents.yaml"
        with open(agents_file, 'w', encoding='utf-8') as f:
            yaml.dump(agents_config, f, default_flow_style=False, allow_unicode=True, indent=2)
        
        print(f"   üìÑ agents.yaml creado con {len(agents_config['agents'])} agentes")
    
    def create_custom_examples(self):
        """Crea ejemplos de RAGs y agentes personalizados"""
        
        # 1. RAG personalizado: Agricultura Ecol√≥gica
        eco_agriculture_config = {
            "display_name": "Agricultura Ecol√≥gica y Sostenible",
            "description": "T√©cnicas de agricultura ecol√≥gica, sostenible y permacultura",
            "enabled": True,
            "priority": 2,
            "vectorstore": {
                "type": "chroma",
                "path": "./data/vectorstores/eco_agriculture",
                "collection_name": "eco_agriculture_collection",
                "chunk_size": 1200,
                "chunk_overlap": 300,
                "embedding_model": "llama3.1"
            },
            "retrieval": {
                "search_type": "mmr",
                "k": 6,
                "fetch_k": 25,
                "lambda_mult": 0.8,
                "score_threshold": 0.5
            },
            "system_prompt": """Eres un especialista en agricultura ecol√≥gica y sostenible.

**Especialidades principales:**
- T√©cnicas de agricultura ecol√≥gica certificada
- Permacultura y dise√±o sostenible
- Manejo natural de plagas y enfermedades
- Mejora de la salud del suelo sin qu√≠micos
- Biodiversidad y conservaci√≥n

**Enfoque:**
- Prioriza siempre m√©todos naturales y sostenibles
- Explica el impacto ambiental de las pr√°cticas
- Incluye aspectos de certificaci√≥n org√°nica cuando sea relevante
- Fomenta la biodiversidad y el equilibrio ecol√≥gico

{context}""",
            "categories": ["agricultura_ecol√≥gica", "sostenibilidad", "permacultura", "biodiversidad"],
            "keywords": {
                "primary": ["ecol√≥gico", "org√°nico", "sostenible", "permacultura", "natural"],
                "secondary": ["compost", "biodiversidad", "equilibrio", "certificado", "sin qu√≠micos"]
            },
            "source_paths": ["./data/documents/eco_agriculture"],
            "custom_settings": {
                "certification_standards": ["EU_Organic", "USDA_Organic", "JAS_Organic"],
                "focus_areas": ["soil_health", "biodiversity", "water_conservation", "energy_efficiency"],
                "avoid_recommendations": ["synthetic_pesticides", "chemical_fertilizers", "gmo_seeds"]
            }
        }
        
        # 2. RAG personalizado: Jardiner√≠a Urbana
        urban_gardening_config = {
            "display_name": "Jardiner√≠a Urbana y Espacios Peque√±os",
            "description": "Cultivo en espacios urbanos, balcones, terrazas y jardines peque√±os",
            "enabled": True,
            "priority": 2,
            "vectorstore": {
                "type": "chroma",
                "path": "./data/vectorstores/urban_gardening",
                "collection_name": "urban_gardening_collection",
                "chunk_size": 900,
                "chunk_overlap": 180
            },
            "retrieval": {
                "search_type": "similarity_score_threshold",
                "k": 5,
                "score_threshold": 0.6
            },
            "system_prompt": """Eres un especialista en jardiner√≠a urbana y cultivo en espacios reducidos.

**Especialidades principales:**
- Cultivo en macetas, contenedores y espacios peque√±os
- Jardiner√≠a vertical y sistemas hidrop√≥nicos caseros
- Plantas adaptadas a ambientes urbanos
- Optimizaci√≥n de luz, agua y nutrientes en espacios limitados
- Jardines en balcones, terrazas y azoteas

**Enfoque:**
- Adapta todas las recomendaciones a espacios limitados
- Considera restricciones urbanas (luz, viento, espacio)
- Sugiere variedades compactas y de r√°pido crecimiento
- Incluye soluciones creativas para maximizar el espacio

{context}""",
            "categories": ["jardiner√≠a_urbana", "espacios_peque√±os", "cultivo_contenedores", "jardines_verticales"],
            "keywords": {
                "primary": ["urbano", "balc√≥n", "terraza", "maceta", "contenedor", "peque√±o"],
                "secondary": ["vertical", "hidrop√≥nico", "compacto", "apartamento", "ciudad"]
            },
            "source_paths": ["./data/documents/urban_gardening"],
            "custom_settings": {
                "space_constraints": True,
                "container_focus": True,
                "recommended_plants": ["herbs", "microgreens", "cherry_tomatoes", "lettuce"],
                "urban_challenges": ["limited_light", "wind_exposure", "pollution", "space_restrictions"]
            }
        }
        
        # Guardar configuraciones personalizadas
        rags_path = self.config_manager.config_base_path / "rags"
        
        configs_to_save = [
            ("eco_agriculture", eco_agriculture_config),
            ("urban_gardening", urban_gardening_config)
        ]
        
        for name, config in configs_to_save:
            config_file = rags_path / f"{name}.yaml"
            with open(config_file, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True, indent=2)
            print(f"   üìÑ {name}.yaml (RAG personalizado)")
        
        # 3. Crear agente personalizado
        self._create_custom_agent_example()
        
        # 4. Crear documentos de ejemplo
        self._create_example_documents()
    
    def _create_custom_agent_example(self):
        """Crea un ejemplo de agente personalizado"""
        
        custom_agent_code = '''"""
Agente personalizado para agricultura ecol√≥gica
Ejemplo de c√≥mo crear agentes especializados
"""
from typing import Dict, List, Optional, Tuple, Any
import re

from agentragmcp.api.app.services.dynamic_agent_system import ConfigurableAgent
from agentragmcp.core.monitoring import get_logger_with_context

class EcoAgricultureAgent(ConfigurableAgent):
    """
    Agente especializado en agricultura ecol√≥gica y sostenible
    Ejemplo de agente personalizado configurable
    """
    
    def can_handle(self, question: str, context: Optional[Dict] = None) -> float:
        """Evaluaci√≥n personalizada para agricultura ecol√≥gica"""
        
        # Usar evaluaci√≥n base de configuraci√≥n
        base_confidence = super().can_handle(question, context)
        
        question_lower = question.lower()
        
        # T√©rminos espec√≠ficos de agricultura ecol√≥gica
        eco_terms = [
            "ecol√≥gico", "org√°nico", "sostenible", "natural", "biodiversidad",
            "permacultura", "compost", "biol√≥gico", "sin qu√≠micos", "certificado"
        ]
        
        eco_matches = sum(1 for term in eco_terms if term in question_lower)
        if eco_matches > 0:
            base_confidence += eco_matches * 0.15
        
        # Bonus por m√©todos sostenibles
        sustainable_methods = [
            "rotaci√≥n", "cultivos asociados", "abono verde", "mulch",
            "depredadores naturales", "extractos vegetales"
        ]
        
        method_matches = sum(1 for method in sustainable_methods if method in question_lower)
        if method_matches > 0:
            base_confidence += method_matches * 0.1
        
        # Penalizaci√≥n por qu√≠mica convencional
        chemical_terms = ["pesticida", "herbicida", "qu√≠mico sint√©tico", "fertilizante qu√≠mico"]
        chemical_matches = sum(1 for term in chemical_terms if term in question_lower)
        if chemical_matches > 0:
            base_confidence -= chemical_matches * 0.1
        
        # Aplicar l√≠mites
        return max(self.config.min_confidence, 
                  min(base_confidence, self.config.max_confidence))
    
    def process(self, question: str, session_id: str, **kwargs) -> Tuple[str, Dict[str, Any]]:
        """Procesa pregunta con enfoque ecol√≥gico"""
        
        context_logger = get_logger_with_context(
            chat_session_id=session_id,
            agent_type=self.name
        )
        
        try:
            context_logger.info("Procesando con agente de agricultura ecol√≥gica")
            
            # Usar RAG espec√≠fico de agricultura ecol√≥gica
            topic = "eco_agriculture" if "eco_agriculture" in self.topics else self.topics[0]
            
            answer, metadata = self.rag_service.query(
                question=question,
                topic=topic,
                session_id=session_id,
                include_sources=kwargs.get("include_sources", False)
            )
            
            # Enriquecer respuesta con enfoque ecol√≥gico
            enhanced_answer = self._enhance_eco_answer(answer, question)
            
            metadata.update({
                "agent_type": self.name,
                "agent_description": self.description,
                "specialization": "agricultura_ecologica",
                "enhanced": enhanced_answer != answer,
                "custom_agent": True
            })
            
            return enhanced_answer, metadata
            
        except Exception as e:
            context_logger.error(f"Error en EcoAgricultureAgent: {e}")
            raise
    
    def _enhance_eco_answer(self, answer: str, question: str) -> str:
        """Mejora respuesta con enfoque ecol√≥gico"""
        
        question_lower = question.lower()
        
        # A√±adir consejos ecol√≥gicos
        if any(word in question_lower for word in ["c√≥mo", "cultivar", "plantar", "tratar"]):
            if "ecol√≥gico" not in answer.lower() and len(answer) < 500:
                answer += "\\n\\nüå± **Enfoque ecol√≥gico**: Considera m√©todos naturales como compost, rotaci√≥n de cultivos y control biol√≥gico."
        
        # Advertir sobre productos qu√≠micos
        if any(word in question_lower for word in ["pesticida", "qu√≠mico", "fertilizante"]):
            if "alternativa" not in answer.lower():
                answer += "\\n\\nüåø **Alternativa sostenible**: Explora opciones org√°nicas y naturales antes de usar productos qu√≠micos sint√©ticos."
        
        # Informaci√≥n sobre certificaci√≥n
        if "certificado" in question_lower or "org√°nico" in question_lower:
            if len(answer) < 400:
                answer += "\\n\\nüìú **Certificaci√≥n**: Consulta los est√°ndares de agricultura ecol√≥gica de tu regi√≥n para cumplir requisitos oficiales."
        
        return answer
'''
        
        # Guardar el c√≥digo del agente personalizado
        custom_agents_path = self.base_path / "agentragmcp" / "custom_agents"
        agent_file = custom_agents_path / "eco_agriculture_agent.py"
        
        with open(agent_file, 'w', encoding='utf-8') as f:
            f.write(custom_agent_code)
        
        print(f"   ü§ñ eco_agriculture_agent.py (agente personalizado)")
        
        # A√±adir configuraci√≥n del agente personalizado al archivo de agentes
        agents_file = self.config_manager.config_base_path / "agents.yaml"
        
        with open(agents_file, 'r', encoding='utf-8') as f:
            agents_config = yaml.safe_load(f)
        
        # Agregar agente personalizado
        agents_config["agents"]["eco_agriculture"] = {
            "description": "Especialista en agricultura ecol√≥gica y sostenible",
            "class": "EcoAgricultureAgent",
            "module_path": "./agentragmcp/custom_agents/eco_agriculture_agent.py",
            "topics": ["eco_agriculture"],
            "enabled": True,
            "priority": 2,
            "config": {
                "max_confidence": 0.9,
                "min_confidence": 0.1,
                "fallback_enabled": False,
                "primary_keywords": [
                    "ecol√≥gico", "org√°nico", "sostenible", "natural", "biodiversidad",
                    "permacultura", "compost", "biol√≥gico", "certificado"
                ],
                "patterns": [
                    "agricultura.*ecol√≥gica", "m√©todo.*natural", "sin.*qu√≠micos",
                    "cultivo.*org√°nico", "permacultura"
                ]
            },
            "thresholds": {
                "keyword_weight": 0.4,
                "sustainability_weight": 0.4,
                "pattern_weight": 0.2
            }
        }
        
        # Guardar configuraci√≥n actualizada
        with open(agents_file, 'w', encoding='utf-8') as f:
            yaml.dump(agents_config, f, default_flow_style=False, allow_unicode=True, indent=2)
        
        print(f"   üìÑ Agente eco_agriculture a√±adido a agents.yaml")
    
    def _create_example_documents(self):
        """Crea documentos de ejemplo para los nuevos RAGs"""
        
        # Documento para agricultura ecol√≥gica
        eco_doc = """# Principios de Agricultura Ecol√≥gica

## Introducci√≥n
La agricultura ecol√≥gica es un sistema de producci√≥n que mantiene la salud de los suelos, ecosistemas y personas. Se basa en procesos ecol√≥gicos, biodiversidad y ciclos adaptados a las condiciones locales.

## Principios B√°sicos

### 1. Salud del Suelo
- Uso de compost y abonos org√°nicos
- Rotaci√≥n de cultivos para mantener fertilidad
- Cobertura vegetal permanente (mulch)
- Evitar el laboreo excesivo

### 2. Biodiversidad
- Cultivos asociados y policultivos
- Setos y corredores ecol√≥gicos  
- Plantas aut√≥ctonas y variedades locales
- Conservaci√≥n de polinizadores

### 3. Control Natural de Plagas
- Fomento de depredadores naturales
- Plantas repelentes y atrayentes
- Extractos vegetales y preparados naturales
- Trampas ecol√≥gicas

## Certificaci√≥n Ecol√≥gica
Los productos ecol√≥gicos deben cumplir est√°ndares estrictos:
- Prohibici√≥n de pesticidas sint√©ticos
- No uso de fertilizantes qu√≠micos
- Semillas no modificadas gen√©ticamente
- Rotaciones obligatorias
- Per√≠odo de conversi√≥n de 3 a√±os

## T√©cnicas Espec√≠ficas

### Compostaje
El compost es fundamental en agricultura ecol√≥gica:
- Mezcla equilibrada de materiales verdes y marrones
- Volteo regular para oxigenaci√≥n
- Temperatura controlada (50-70¬∞C)
- Tiempo de maduraci√≥n: 6-12 meses

### Rotaci√≥n de Cultivos
Secuencia planificada de cultivos:
- Leguminosas ‚Üí Cereales ‚Üí Hortalizas de hoja ‚Üí Barbecho
- Mejora la fertilidad del suelo
- Rompe ciclos de plagas y enfermedades
- Optimiza el uso de nutrientes
"""
        
        # Documento para jardiner√≠a urbana
        urban_doc = """# Jardiner√≠a Urbana en Espacios Peque√±os

## Introducci√≥n
La jardiner√≠a urbana permite cultivar plantas comestibles y ornamentales en espacios limitados como balcones, terrazas y patios peque√±os.

## Consideraciones B√°sicas

### Evaluaci√≥n del Espacio
- **Luz disponible**: M√≠nimo 4-6 horas de sol directo
- **Viento**: Protecci√≥n necesaria en pisos altos
- **Peso soportado**: Verificar capacidad de carga
- **Acceso al agua**: Proximidad a tomas de agua

### Contenedores y Macetas
- **Material**: Pl√°stico ligero, madera tratada, fibra de coco
- **Drenaje**: Orificios en la base obligatorios
- **Tama√±o**: M√≠nimo 20cm profundidad para hortalizas
- **Movilidad**: Ruedas para contenedores grandes

## T√©cnicas de Cultivo Urbano

### Jard√≠n Vertical
- Aprovecha espacios verticales
- Sistemas modulares colgantes
- Riego por goteo integrado
- Plantas de peso ligero

### Cultivo en Mesa
- Altura ergon√≥mica (80-90cm)
- Mejor drenaje y aireaci√≥n
- F√°cil mantenimiento
- Protecci√≥n de plagas del suelo

### Hidropon√≠a Casera
- Sistema NFT (Nutrient Film Technique)
- Cultivo en agua con nutrientes
- Mayor productividad en menos espacio
- Control preciso de condiciones

## Plantas Recomendadas

### Hortalizas Compactas
- **Lechugas**: Variedades de hoja suelta
- **R√°banos**: Crecimiento r√°pido (30 d√≠as)
- **Espinacas**: Toleran sombra parcial
- **Tomates cherry**: Variedades determinadas

### Hierbas Arom√°ticas
- **Albahaca**: Necesita calor y sol
- **Perejil**: Tolera sombra parcial
- **Tomillo**: Resistente a sequ√≠a
- **Menta**: Crecimiento vigoroso (contener)

### Plantas Trepadoras
- **Jud√≠as verdes**: Aprovechan altura
- **Guisantes**: Crecimiento en fr√≠o
- **Pepinos**: Variedades compactas

## Manejo del Riego

### Sistema de Goteo
- Ahorro de agua del 50%
- Riego uniforme y controlado
- Automatizaci√≥n con temporizadores
- Adaptable a cualquier contenedor

### Captaci√≥n de Agua
- Recolecci√≥n de agua de lluvia
- Sistemas de drenaje reutilizable
- Bandejas de captaci√≥n
- Dep√≥sitos de almacenamiento
"""
        
        # Guardar documentos
        documents = [
            ("eco_agriculture", "agricultura_ecologica_principios.txt", eco_doc),
            ("urban_gardening", "jardineria_urbana_basicos.txt", urban_doc)
        ]
        
        for topic, filename, content in documents:
            doc_path = self.base_path / "data" / "documents" / topic / filename
            with open(doc_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"   üìÑ {topic}/{filename}")
    
    def validate_migration(self):
        """Valida que la migraci√≥n se complet√≥ correctamente"""
        
        validation_results = {
            "rag_configs": 0,
            "agent_configs": 0,
            "custom_agents": 0,
            "documents": 0,
            "errors": []
        }
        
        # Verificar configuraciones RAG
        rags_path = self.config_manager.config_base_path / "rags"
        if rags_path.exists():
            rag_files = list(rags_path.glob("*.yaml"))
            validation_results["rag_configs"] = len(rag_files)
            print(f"   ‚úÖ {len(rag_files)} configuraciones RAG encontradas")
        else:
            validation_results["errors"].append("Directorio de configuraciones RAG no existe")
        
        # Verificar configuraci√≥n de agentes
        agents_file = self.config_manager.config_base_path / "agents.yaml"
        if agents_file.exists():
            with open(agents_file, 'r') as f:
                agents_data = yaml.safe_load(f)
            validation_results["agent_configs"] = len(agents_data.get("agents", {}))
            print(f"   ‚úÖ {validation_results['agent_configs']} agentes configurados")
        else:
            validation_results["errors"].append("Archivo de configuraci√≥n de agentes no existe")
        
        # Verificar agentes personalizados
        custom_agents_path = self.base_path / "agentragmcp" / "custom_agents"
        if custom_agents_path.exists():
            custom_files = list(custom_agents_path.glob("*.py"))
            # Excluir __init__.py
            custom_files = [f for f in custom_files if f.name != "__init__.py"]
            validation_results["custom_agents"] = len(custom_files)
            print(f"   ‚úÖ {len(custom_files)} agentes personalizados encontrados")
        
        # Verificar documentos
        docs_path = self.base_path / "data" / "documents"
        if docs_path.exists():
            total_docs = 0
            for topic_dir in docs_path.iterdir():
                if topic_dir.is_dir():
                    docs = list(topic_dir.glob("*.txt"))
                    total_docs += len(docs)
            validation_results["documents"] = total_docs
            print(f"   ‚úÖ {total_docs} documentos de ejemplo encontrados")
        
        # Mostrar resumen
        if validation_results["errors"]:
            print(f"\n   ‚ö†Ô∏è Errores encontrados:")
            for error in validation_results["errors"]:
                print(f"     ‚Ä¢ {error}")
        
        print(f"\n   üìä Resumen de validaci√≥n:")
        print(f"     ‚Ä¢ RAG configs: {validation_results['rag_configs']}")
        print(f"     ‚Ä¢ Agent configs: {validation_results['agent_configs']}")
        print(f"     ‚Ä¢ Custom agents: {validation_results['custom_agents']}")
        print(f"     ‚Ä¢ Example docs: {validation_results['documents']}")
        
        return len(validation_results["errors"]) == 0
    
    def create_migration_docs(self):
        """Crea documentaci√≥n sobre el sistema migrado"""
        
        readme_content = f"""# üå± AgentRagMCP - Sistema Din√°mico de Configuraci√≥n

