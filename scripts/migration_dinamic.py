#!/usr/bin/env python3
"""
Script de migraci√≥n para convertir el sistema AgentRagMCP 
de configuraci√≥n hardcodeada a sistema din√°mico
"""

import os
import sys
import yaml
import json
import shutil
from pathlib import Path
from typing import Dict, List, Any

# A√±adir el directorio ra√≠z al path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from agentragmcp.core.dynamic_config import ConfigManager

class AgentRagMCPMigrator:
    """Migrador del sistema AgentRagMCP a configuraci√≥n din√°mica"""
    
    def __init__(self, base_path: str = None):
        self.base_path = Path(base_path) if base_path else Path.cwd()
        self.config_manager = ConfigManager(str(self.base_path / "data" / "configs"))
        
        print(f"üîÑ Iniciando migraci√≥n en: {self.base_path}")
        print(f"üìç Configuraciones en: {self.config_manager.config_base_path}")
    
    def migrate_full_system(self):
        """Migra todo el sistema al nuevo formato"""
        print("\n" + "="*60)
        print("üöÄ MIGRACI√ìN COMPLETA A SISTEMA DIN√ÅMICO")
        print("="*60)
        
        steps = [
            ("üìÅ Crear estructura de directorios", self.setup_directory_structure),
            ("üìã Migrar configuraciones RAG", self.migrate_rag_configs),
            ("ü§ñ Migrar configuraciones de agentes", self.migrate_agent_configs),
            ("üìö Crear ejemplos personalizados", self.create_custom_examples),
            ("üîÑ Crear agentes personalizados", self.create_custom_agents),
            ("‚úÖ Validar migraci√≥n", self.validate_migration),
            ("üß™ Pruebas de funcionalidad", self.test_migration),
            ("üìñ Crear documentaci√≥n", self.create_migration_docs),
            ("üßπ Limpieza de archivos obsoletos", self.cleanup_old_files)
        ]
        
        for step_name, step_func in steps:
            print(f"\n{step_name}...")
            try:
                step_func()
                print(f"‚úÖ {step_name} completado")
            except Exception as e:
                print(f"‚ùå Error en {step_name}: {e}")
                raise
        
        print(f"\nüéâ ¬°Migraci√≥n completada exitosamente!")
        print(f"\nüìã Pr√≥ximos pasos:")
        print(f"   1. Verificar configuraciones en data/configs/")
        print(f"   2. A√±adir documentos a data/documents/")
        print(f"   3. Ejecutar proceso de vectorizaci√≥n")
        print(f"   4. Probar la aplicaci√≥n")
    
    def setup_directory_structure(self):
        """Crea la estructura de directorios para el sistema din√°mico"""
        directories = [
            "data/configs/rags",
            "data/configs/agents", 
            "data/configs/custom",
            "data/documents/plants",
            "data/documents/pathology",
            "data/documents/general",
            "data/documents/eco_agriculture",
            "data/documents/urban_gardening", 
            "data/documents/permaculture",
            "data/vectorstores/plants",
            "data/vectorstores/pathology",
            "data/vectorstores/general",
            "data/vectorstores/eco_agriculture",
            "data/vectorstores/urban_gardening",
            "data/vectorstores/permaculture",
            "agentragmcp/custom_agents",
            "backups/migration"
        ]
        
        for directory in directories:
            dir_path = self.base_path / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"   üìÅ {directory}")
        
        # Crear archivo __init__.py para custom_agents
        init_file = self.base_path / "agentragmcp" / "custom_agents" / "__init__.py"
        if not init_file.exists():
            init_file.write_text("# Custom agents module\n")
    
    def migrate_rag_configs(self):
        """Migra las configuraciones RAG hardcodeadas a archivos individuales"""
        
        # Configuraciones RAG extra√≠das del c√≥digo existente
        rag_configs = {
            "plants": {
                "display_name": "Plantas y Bot√°nica General",
                "description": "Informaci√≥n general sobre plantas, cultivo, cuidados y bot√°nica",
                "enabled": True,
                "priority": 1,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/plants",
                    "collection_name": "plants_collection",
                    "chunk_size": 1000,
                    "chunk_overlap": 200,
                    "embedding_model": "llama3.1",
                    "embedding_base_url": "http://localhost:11434"
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 5,
                    "fetch_k": 20,
                    "lambda_mult": 0.7,
                    "score_threshold": 0.5
                },
                "system_prompt": """Eres un especialista en bot√°nica y plantas.

**Especialidades principales:**
- Informaci√≥n general sobre especies de plantas
- T√©cnicas de cultivo y propagaci√≥n
- Cuidados espec√≠ficos por especie
- Identificaci√≥n de plantas
- Condiciones de crecimiento √≥ptimas

**IMPORTANTE:** Enf√≥cate en informaci√≥n pr√°ctica y aplicable.

{context}""",
                "categories": ["cultivo", "cuidados", "especies", "bot√°nica"],
                "keywords": {
                    "primary": ["planta", "plantas", "√°rbol", "cultivo", "jard√≠n", "bot√°nica"],
                    "secondary": ["sembrar", "plantar", "cuidar", "especie", "variedad"]
                },
                "source_paths": ["./data/documents/plants"],
                "custom_settings": {
                    "include_scientific_names": True,
                    "focus_practical": True
                }
            },
            
            "pathology": {
                "display_name": "Patolog√≠as y Enfermedades de Plantas",
                "description": "Especialista en diagn√≥stico y tratamiento de enfermedades, plagas y patolog√≠as vegetales",
                "enabled": True,
                "priority": 2,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/pathology",
                    "collection_name": "pathology_collection",
                    "chunk_size": 1000,
                    "chunk_overlap": 200,
                    "embedding_model": "llama3.1",
                    "embedding_base_url": "http://localhost:11434"
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 5,
                    "fetch_k": 20,
                    "lambda_mult": 0.7,
                    "score_threshold": 0.5
                },
                "system_prompt": """Eres un especialista en patolog√≠as vegetales y fitopatolog√≠a.

**Especialidades principales:**
- Diagn√≥stico de enfermedades de plantas
- Identificaci√≥n de plagas y pat√≥genos  
- Tratamientos fitosanitarios
- Estrategias de prevenci√≥n
- Manejo integrado de plagas

**IMPORTANTE:** Siempre incluye advertencias de seguridad para productos qu√≠micos.

{context}""",
                "categories": ["diagn√≥stico_enfermedades", "tratamientos", "prevenci√≥n", "plagas"],
                "keywords": {
                    "primary": ["enfermedad", "plaga", "s√≠ntomas", "tratamiento", "hongo", "bacteria"],
                    "secondary": ["patolog√≠a", "virus", "prevenci√≥n", "control", "insecticida"]
                },
                "source_paths": ["./data/documents/pathology"],
                "custom_settings": {
                    "safety_warnings": True,
                    "treatment_focus": "integrated_pest_management",
                    "include_prevention": True
                }
            },
            
            "general": {
                "display_name": "Conocimiento General de Bot√°nica",
                "description": "Informaci√≥n educativa y divulgativa sobre el mundo vegetal",
                "enabled": True,
                "priority": 3,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/general",
                    "collection_name": "general_collection",
                    "chunk_size": 1000,
                    "chunk_overlap": 200,
                    "embedding_model": "llama3.1",
                    "embedding_base_url": "http://localhost:11434"
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 5,
                    "fetch_k": 20,
                    "lambda_mult": 0.7,
                    "score_threshold": 0.5
                },
                "system_prompt": """Eres un educador especialista en bot√°nica y ciencias vegetales.

**Especialidades principales:**
- Conceptos fundamentales de bot√°nica
- Historia y evoluci√≥n de las plantas
- Procesos biol√≥gicos vegetales
- Ecosistemas y biodiversidad vegetal
- Divulgaci√≥n cient√≠fica accesible

**IMPORTANTE:** Explica conceptos de forma clara y educativa.

{context}""",
                "categories": ["educaci√≥n", "conceptos", "historia", "biolog√≠a_vegetal"],
                "keywords": {
                    "primary": ["qu√© es", "c√≥mo funciona", "por qu√©", "bot√°nica", "informaci√≥n"],
                    "secondary": ["proceso", "concepto", "definici√≥n", "biolog√≠a", "ciencia"]
                },
                "source_paths": ["./data/documents/general"],
                "custom_settings": {
                    "educational_focus": True,
                    "include_examples": True
                }
            }
        }
        
        # Crear configuraciones adicionales de ejemplo
        rag_configs.update({
            "eco_agriculture": {
                "display_name": "Agricultura Ecol√≥gica",
                "description": "T√©cnicas de agricultura sostenible y ecol√≥gica",
                "enabled": True,
                "priority": 4,
                "vectorstore": {
                    "type": "chroma",
                    "path": "./data/vectorstores/eco_agriculture",
                    "collection_name": "eco_agriculture_collection",
                    "chunk_size": 1200,
                    "chunk_overlap": 300,
                    "embedding_model": "llama3.1",
                    "embedding_base_url": "http://localhost:11434"
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 6,
                    "fetch_k": 20,
                    "lambda_mult": 0.8,
                    "score_threshold": 0.4
                },
                "system_prompt": """Eres un especialista en agricultura ecol√≥gica y sostenible.

Enf√≥cate en t√©cnicas respetuosas con el medio ambiente, biodiversidad y sostenibilidad.

{context}""",
                "categories": ["agricultura_ecol√≥gica", "sostenibilidad", "biodiversidad"],
                "keywords": {
                    "primary": ["ecol√≥gico", "sostenible", "biodiversidad", "org√°nico"],
                    "secondary": ["permacultura", "compost", "rotaci√≥n", "natural"]
                },
                "source_paths": ["./data/documents/eco_agriculture"],
                "custom_settings": {
                    "certification_standards": ["EU_Organic", "USDA_Organic"],
                    "focus_areas": ["soil_health", "biodiversity", "water_conservation"]
                }
            },
            
            "urban_gardening": {
                "display_name": "Jardiner√≠a Urbana",
                "description": "Cultivo en espacios urbanos, balcones y espacios reducidos",
                "enabled": True,
                "priority": 5,
                "vectorstore": {
                    "type": "chroma", 
                    "path": "./data/vectorstores/urban_gardening",
                    "collection_name": "urban_gardening_collection",
                    "chunk_size": 800,
                    "chunk_overlap": 150,
                    "embedding_model": "llama3.1",
                    "embedding_base_url": "http://localhost:11434"
                },
                "retrieval": {
                    "search_type": "mmr",
                    "k": 4,
                    "fetch_k": 15,
                    "lambda_mult": 0.6,
                    "score_threshold": 0.5
                },
                "system_prompt": """Eres un especialista en jardiner√≠a urbana y cultivos en espacios reducidos.

**Especialidades:**
- Cultivo en balcones y terrazas
- Plantas para interiores
- Sistemas de riego eficientes
- Aprovechamiento de espacios peque√±os

{context}""",
                "categories": ["jardiner√≠a_urbana", "espacios_reducidos", "cultivo_interior"],
                "keywords": {
                    "primary": ["balc√≥n", "terraza", "interior", "urbano", "maceta"],
                    "secondary": ["apartamento", "espacio", "peque√±o", "vertical"]
                },
                "source_paths": ["./data/documents/urban_gardening"],
                "custom_settings": {
                    "space_focus": "small_spaces",
                    "container_gardening": True
                }
            }
        })
        
        # Guardar configuraciones
        rags_path = self.config_manager.config_base_path / "rags"
        
        for topic_name, config_data in rag_configs.items():
            config_file = rags_path / f"{topic_name}.yaml"
            with open(config_file, 'w', encoding='utf-8') as f:
                yaml.dump(config_data, f, default_flow_style=False, allow_unicode=True)
            print(f"   üìã {topic_name}.yaml")
    
    def migrate_agent_configs(self):
        """Migra las configuraciones de agentes hardcodeadas"""
        
        agents_config = {
            "agents": {
                "plants": {
                    "name": "plants",
                    "description": "Especialista en informaci√≥n general de plantas, cultivo y bot√°nica",
                    "class": "PlantsAgent",
                    "topics": ["plants"],
                    "enabled": True,
                    "priority": 1,
                    "config": {
                        "max_confidence": 1.0,
                        "min_confidence": 0.1,
                        "fallback_enabled": False,
                        "primary_keywords": [
                            "planta", "plantas", "√°rbol", "√°rboles", "cultivo", "cultivar",
                            "sembrar", "plantar", "jard√≠n", "huerto", "bot√°nica"
                        ],
                        "patterns": [
                            "c√≥mo.*cultivar", "cu√°ndo.*plantar", "qu√©.*planta",
                            "caracter√≠sticas.*de", "cuidados.*de", "informaci√≥n.*sobre"
                        ],
                        "target_species": [
                            "malus domestica", "prunus cerasus", "vitis vinifera",
                            "citrus aurantium", "prunus persica", "fragaria vesca",
                            "solanum lycopersicum"
                        ]
                    },
                    "thresholds": {
                        "keyword_weight": 0.3,
                        "species_weight": 0.5,
                        "pattern_weight": 0.2,
                        "context_bonus": 0.2
                    }
                },
                
                "pathology": {
                    "name": "pathology",
                    "description": "Especialista en patolog√≠as, enfermedades, plagas y tratamientos de plantas",
                    "class": "PathologyAgent",
                    "topics": ["pathology"],
                    "enabled": True,
                    "priority": 2,
                    "config": {
                        "max_confidence": 1.0,
                        "min_confidence": 0.1,
                        "fallback_enabled": False,
                        "primary_keywords": [
                            "enfermedad", "enfermedades", "patolog√≠a", "patolog√≠as",
                            "plaga", "plagas", "hongo", "hongos", "bacteria", "bacterias",
                            "virus", "tratamiento", "s√≠ntomas", "control"
                        ],
                        "symptom_keywords": [
                            "mancha", "manchas", "amarilleo", "marchitez", "podredumbre",
                            "necrosis", "lesi√≥n", "deformaci√≥n"
                        ],
                        "patterns": [
                            "qu√©.*enfermedad", "c√≥mo.*tratar", "s√≠ntomas.*de",
                            "problema.*con", "se.*est√°.*muriendo", "hojas.*amarillas"
                        ],
                        "target_species": [
                            "Malus domestica", "Vitis vinifera", 
                            "Citrus aurantium", "Solanum lycopersicum"
                        ]
                    },
                    "thresholds": {
                        "keyword_weight": 0.5,
                        "symptom_weight": 0.3,
                        "species_weight": 0.3,
                        "pattern_weight": 0.4
                    }
                },
                
                "general": {
                    "name": "general",
                    "description": "Asistente general para consultas diversas sobre plantas y bot√°nica",
                    "class": "GeneralAgent",
                    "topics": ["general"],
                    "enabled": True,
                    "priority": 3,
                    "config": {
                        "max_confidence": 0.8,
                        "min_confidence": 0.1,
                        "fallback_enabled": True,
                        "primary_keywords": [
                            "qu√© es", "qu√© son", "c√≥mo funciona", "por qu√©",
                            "explicar", "definir", "bot√°nica", "informaci√≥n"
                        ],
                        "patterns": [
                            "qu√©.*es.*la?", "c√≥mo.*funciona", "por.*qu√©.*las?.*plantas",
                            "diferencia.*entre", "tipos.*de", "explicar.*qu√©"
                        ],
                        "educational_focus": True
                    },
                    "thresholds": {
                        "keyword_weight": 0.4,
                        "pattern_weight": 0.3,
                        "educational_bonus": 0.3
                    }
                },
                
                # Agentes personalizados de ejemplo
                "eco_agriculture": {
                    "name": "eco_agriculture",
                    "description": "Especialista en agricultura ecol√≥gica y sostenible",
                    "class": "EcoAgricultureAgent",
                    "topics": ["eco_agriculture"],
                    "enabled": True,
                    "priority": 4,
                    "config": {
                        "max_confidence": 1.0,
                        "min_confidence": 0.1,
                        "primary_keywords": [
                            "ecol√≥gico", "org√°nico", "sostenible", "biodiversidad",
                            "permacultura", "compost", "rotaci√≥n"
                        ],
                        "patterns": [
                            "agricultura.*ecol√≥gica", "cultivo.*org√°nico", ".*sostenible"
                        ],
                        "focus_areas": ["soil_health", "biodiversity", "sustainability"]
                    },
                    "thresholds": {
                        "keyword_weight": 0.6,
                        "pattern_weight": 0.4
                    }
                },
                
                "urban_gardening": {
                    "name": "urban_gardening",
                    "description": "Especialista en jardiner√≠a urbana y cultivos en espacios reducidos",
                    "class": "UrbanGardeningAgent",
                    "topics": ["urban_gardening"],
                    "enabled": True,
                    "priority": 5,
                    "config": {
                        "max_confidence": 1.0,
                        "min_confidence": 0.1,
                        "primary_keywords": [
                            "balc√≥n", "terraza", "interior", "urbano", "maceta",
                            "apartamento", "espacio", "peque√±o"
                        ],
                        "patterns": [
                            "en.*balc√≥n", "en.*terraza", "espacio.*peque√±o", ".*interior"
                        ],
                        "space_types": ["balcony", "terrace", "indoor", "small_space"]
                    },
                    "thresholds": {
                        "keyword_weight": 0.5,
                        "pattern_weight": 0.3,
                        "space_bonus": 0.2
                    }
                }
            }
        }
        
        # Guardar configuraci√≥n de agentes
        agents_file = self.config_manager.config_base_path / "agents.yaml"
        with open(agents_file, 'w', encoding='utf-8') as f:
            yaml.dump(agents_config, f, default_flow_style=False, allow_unicode=True)
        
        print(f"   ü§ñ agents.yaml con {len(agents_config['agents'])} agentes")
    
    def create_custom_examples(self):
        """Crea ejemplos de documentos para cada tem√°tica"""
        
        # Documento para plantas
        plants_doc = """# Cultivo del Manzano (Malus domestica)

## Caracter√≠sticas Generales
El manzano es un √°rbol frutal de la familia Rosaceae, originario de Asia Central.

## Condiciones de Cultivo
- **Clima**: Templado, con inviernos fr√≠os
- **Suelo**: Bien drenado, pH 6.0-7.0
- **Exposici√≥n**: Pleno sol

## Cuidados Espec√≠ficos
### Riego
- Riego regular pero sin encharcamiento
- Especialmente importante durante la fructificaci√≥n

### Poda
- Poda de formaci√≥n en invierno
- Eliminar ramas secas y entrecruzadas

## Variedades Recomendadas
- Golden Delicious
- Red Delicious
- Granny Smith
"""
        
        # Documento para patolog√≠as
        pathology_doc = """# Enfermedades Comunes del Manzano

## Mildiu Polvoriento
### S√≠ntomas
- Polvo blanco en hojas y brotes j√≥venes
- Deformaci√≥n de hojas
- Reducci√≥n del crecimiento

### Tratamiento
- Aplicar fungicidas sist√©micos
- Mejorar ventilaci√≥n
- Eliminar partes afectadas

### Prevenci√≥n
- Evitar riego por aspersi√≥n
- Plantar variedades resistentes

## Fuego Bacteriano
### S√≠ntomas
- Marchitez s√∫bita de flores y brotes
- Exudado bacteriano
- Necrosis progresiva

### Tratamiento
- Eliminaci√≥n inmediata de partes afectadas
- Desinfecci√≥n de herramientas
- Aplicaci√≥n de antibi√≥ticos espec√≠ficos

‚ö†Ô∏è **Advertencia**: Siempre usar equipo de protecci√≥n personal.
"""

        # Documento general
        general_doc = """# Introducci√≥n a la Bot√°nica

## ¬øQu√© es la Bot√°nica?
La bot√°nica es la ciencia que estudia las plantas en todos sus aspectos.

## Clasificaci√≥n de las Plantas
### Por su estructura
- **Bri√≥fitos**: Musgos y hep√°ticas
- **Pterid√≥fitos**: Helechos
- **Gimnospermas**: Con√≠feras
- **Angiospermas**: Plantas con flores

### Por su ciclo de vida
- **Anuales**: Completan su ciclo en un a√±o
- **Bianuales**: Requieren dos a√±os
- **Perennes**: Viven varios a√±os

## Procesos Fundamentales
### Fotos√≠ntesis
Proceso mediante el cual las plantas convierten luz solar en energ√≠a qu√≠mica.

### Respiraci√≥n
Las plantas tambi√©n respiran, consumiendo ox√≠geno y liberando CO2.
"""

        # Documento agricultura ecol√≥gica
        eco_doc = """# Principios de la Agricultura Ecol√≥gica

## Filosof√≠a de Base
La agricultura ecol√≥gica busca trabajar en armon√≠a con la naturaleza.

## Principios Fundamentales
1. **Salud del suelo**: Base de todo sistema sostenible
2. **Biodiversidad**: Promover la diversidad biol√≥gica
3. **Ciclos naturales**: Respetar los ritmos de la naturaleza
4. **Bienestar animal**: Garantizar condiciones naturales

## T√©cnicas Principales
### Compostaje
- Transformaci√≥n de residuos org√°nicos
- Mejora la estructura del suelo
- Aporta nutrientes naturales

### Rotaci√≥n de Cultivos
- Previene agotamiento del suelo
- Reduce plagas y enfermedades
- Optimiza uso de nutrientes

### Control Biol√≥gico
- Uso de enemigos naturales
- Plantas companion
- Preparados biodin√°micos
"""

        # Documento jardiner√≠a urbana
        urban_doc = """# Jardiner√≠a en Espacios Urbanos

## Desaf√≠os de la Ciudad
- Espacio limitado
- Calidad del aire
- Acceso limitado a luz solar
- Restricciones de peso en balcones

## Soluciones Pr√°cticas
### Cultivo Vertical
- Aprovechar paredes y estructuras
- Sistemas de trepado
- Jardines verticales modulares

### Contenedores y Macetas
- Selecci√≥n seg√∫n espacio disponible
- Sistemas de drenaje adecuados
- Movilidad para optimizar luz

## Plantas Recomendadas
### Para balcones
- Hierbas arom√°ticas: albahaca, perejil, cilantro
- Tomates cherry
- Fresas

### Para interiores
- Pothos
- Sansevieria
- Plantas arom√°ticas

## Sistemas de Riego
- Riego por goteo autom√°tico
- Sistemas de autorriego con reserva de agua
- Aplicaciones m√≥viles para control de humedad
"""
        
        # Guardar documentos
        documents = [
            ("plants", "manzano_cultivo.txt", plants_doc),
            ("pathology", "enfermedades_manzano.txt", pathology_doc), 
            ("general", "introduccion_botanica.txt", general_doc),
            ("eco_agriculture", "agricultura_ecologica_principios.txt", eco_doc),
            ("urban_gardening", "jardineria_urbana_basicos.txt", urban_doc)
        ]
        
        for topic, filename, content in documents:
            doc_path = self.base_path / "data" / "documents" / topic / filename
            with open(doc_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"   üìÑ {topic}/{filename}")
    
    def create_custom_agents(self):
        """Crea agentes personalizados de ejemplo"""
        
        # Agente de agricultura ecol√≥gica
        eco_agent_code = '''"""
Agente especializado en agricultura ecol√≥gica y sostenible
"""

from typing import List, Optional, Dict, Any
from agentragmcp.api.app.agents.dinamic_agent import DynamicAgent

class EcoAgricultureAgent(DynamicAgent):
    """Agente especializado en agricultura ecol√≥gica"""
    
    def __init__(self, config: Dict[str, Any], rag_service):
        super().__init__("eco_agriculture", config, rag_service)
        self.focus_areas = config.get("focus_areas", [])
    
    def calculate_confidence(self, question: str) -> float:
        """Calcula confianza espec√≠fica para agricultura ecol√≥gica"""
        confidence = super().calculate_confidence(question)
        
        # Bonus por t√©rminos espec√≠ficos de agricultura ecol√≥gica
        eco_terms = [
            "ecol√≥gico", "org√°nico", "sostenible", "biodiversidad",
            "permacultura", "compost", "rotaci√≥n", "natural"
        ]
        
        question_lower = question.lower()
        eco_matches = sum(1 for term in eco_terms if term in question_lower)
        
        if eco_matches > 0:
            eco_bonus = min(eco_matches * 0.2, 0.4)
            confidence += eco_bonus
        
        return min(confidence, 1.0)
    
    def enhance_response(self, response: str, question: str) -> str:
        """Mejora la respuesta con enfoque ecol√≥gico"""
        enhanced = response
        
        # A√±adir consideraciones ecol√≥gicas
        if any(term in question.lower() for term in ["tratamiento", "control", "plaga"]):
            enhanced += "\\n\\nüå± **Enfoque Ecol√≥gico**: Considera siempre alternativas naturales y sostenibles."
        
        if "cultivo" in question.lower():
            enhanced += "\\n\\n‚ôªÔ∏è **Sostenibilidad**: Recuerda mantener la salud del suelo y la biodiversidad."
        
        return enhanced
'''

        # Agente de jardiner√≠a urbana  
        urban_agent_code = '''"""
Agente especializado en jardiner√≠a urbana y espacios reducidos
"""

from typing import List, Optional, Dict, Any
from agentragmcp.api.app.agents.dinamic_agent import DynamicAgent

class UrbanGardeningAgent(DynamicAgent):
    """Agente especializado en jardiner√≠a urbana"""
    
    def __init__(self, config: Dict[str, Any], rag_service):
        super().__init__("urban_gardening", config, rag_service)
        self.space_types = config.get("space_types", [])
    
    def calculate_confidence(self, question: str) -> float:
        """Calcula confianza espec√≠fica para jardiner√≠a urbana"""
        confidence = super().calculate_confidence(question)
        
        # Bonus por t√©rminos de espacios urbanos
        urban_terms = [
            "balc√≥n", "terraza", "interior", "urbano", "maceta",
            "apartamento", "espacio peque√±o", "vertical"
        ]
        
        question_lower = question.lower()
        urban_matches = sum(1 for term in urban_terms if term in question_lower)
        
        if urban_matches > 0:
            space_bonus = min(urban_matches * 0.15, 0.3)
            confidence += space_bonus
        
        return min(confidence, 1.0)
    
    def enhance_response(self, response: str, question: str) -> str:
        """Mejora la respuesta con enfoque urbano"""
        enhanced = response
        
        # A√±adir consideraciones de espacio
        if any(term in question.lower() for term in ["cultivar", "plantar"]):
            enhanced += "\\n\\nüèôÔ∏è **Adaptaci√≥n Urbana**: Considera las limitaciones de espacio y contenedores."
        
        if "riego" in question.lower():
            enhanced += "\\n\\nüíß **Riego Urbano**: Sistemas de autorriego son ideales para balcones."
        
        return enhanced
'''
        
        # Guardar agentes personalizados
        custom_agents_path = self.base_path / "agentragmcp" / "custom_agents"
        
        agents_to_create = [
            ("eco_agriculture_agent.py", eco_agent_code),
            ("urban_gardening_agent.py", urban_agent_code)
        ]
        
        for filename, code in agents_to_create:
            agent_file = custom_agents_path / filename
            with open(agent_file, 'w', encoding='utf-8') as f:
                f.write(code)
            print(f"   ü§ñ {filename}")
    
    def validate_migration(self):
        """Valida que la migraci√≥n se complet√≥ correctamente"""
        
        validation_results = {
            "rag_configs": 0,
            "agent_configs": 0,
            "custom_agents": 0,
            "documents": 0,
            "errors": []
        }
        
        # Verificar configuraciones RAG
        rags_path = self.config_manager.config_base_path / "rags"
        if rags_path.exists():
            rag_files = list(rags_path.glob("*.yaml"))
            validation_results["rag_configs"] = len(rag_files)
            print(f"   ‚úÖ {len(rag_files)} configuraciones RAG encontradas")
            
            # Verificar configuraciones espec√≠ficas
            expected_rags = ["plants", "pathology", "general", "eco_agriculture", "urban_gardening"]
            for rag_name in expected_rags:
                rag_file = rags_path / f"{rag_name}.yaml"
                if not rag_file.exists():
                    validation_results["errors"].append(f"Configuraci√≥n RAG faltante: {rag_name}")
        else:
            validation_results["errors"].append("Directorio de configuraciones RAG no existe")
        
        # Verificar configuraci√≥n de agentes
        agents_file = self.config_manager.config_base_path / "agents.yaml"
        if agents_file.exists():
            with open(agents_file, 'r') as f:
                agents_data = yaml.safe_load(f)
            validation_results["agent_configs"] = len(agents_data.get("agents", {}))
            print(f"   ‚úÖ {validation_results['agent_configs']} agentes configurados")
        else:
            validation_results["errors"].append("Archivo de configuraci√≥n de agentes no existe")
        
        # Verificar agentes personalizados
        custom_agents_path = self.base_path / "agentragmcp" / "custom_agents"
        if custom_agents_path.exists():
            custom_files = list(custom_agents_path.glob("*.py"))
            # Excluir __init__.py
            custom_files = [f for f in custom_files if f.name != "__init__.py"]
            validation_results["custom_agents"] = len(custom_files)
            print(f"   ‚úÖ {len(custom_files)} agentes personalizados encontrados")
        
        # Verificar documentos
        docs_path = self.base_path / "data" / "documents"
        if docs_path.exists():
            total_docs = 0
            for topic_dir in docs_path.iterdir():
                if topic_dir.is_dir():
                    docs = list(topic_dir.glob("*.txt"))
                    total_docs += len(docs)
            validation_results["documents"] = total_docs
            print(f"   ‚úÖ {total_docs} documentos de ejemplo encontrados")
        
        # Mostrar resumen
        if validation_results["errors"]:
            print(f"\n   ‚ö†Ô∏è Errores encontrados:")
            for error in validation_results["errors"]:
                print(f"     ‚Ä¢ {error}")
        
        print(f"\n   üìä Resumen de validaci√≥n:")
        print(f"     ‚Ä¢ RAG configs: {validation_results['rag_configs']}")
        print(f"     ‚Ä¢ Agent configs: {validation_results['agent_configs']}")
        print(f"     ‚Ä¢ Custom agents: {validation_results['custom_agents']}")
        print(f"     ‚Ä¢ Example docs: {validation_results['documents']}")
        
        return len(validation_results["errors"]) == 0
    
    def test_migration(self):
        """Prueba la funcionalidad del sistema migrado"""
        print("   üß™ Probando carga de configuraciones...")
        
        try:
            # Probar carga de configuraciones RAG
            test_topics = ["plants", "pathology", "general"]
            for topic in test_topics:
                config = self.config_manager.load_rag_config(topic)
                if config:
                    print(f"     ‚úÖ RAG {topic} cargado correctamente")
                else:
                    print(f"     ‚ùå Error cargando RAG {topic}")
            
            # Probar carga de configuraciones de agentes
            test_agents = ["plants", "pathology", "general"]
            for agent in test_agents:
                config = self.config_manager.load_agent_config(agent)
                if config:
                    print(f"     ‚úÖ Agente {agent} cargado correctamente")
                else:
                    print(f"     ‚ùå Error cargando agente {agent}")
        
        except Exception as e:
            print(f"     ‚ùå Error en pruebas: {e}")
    
    def create_migration_docs(self):
        """Crea documentaci√≥n sobre el sistema migrado"""
        
        readme_content = f"""# üå± AgentRagMCP - Sistema Din√°mico de Configuraci√≥n

## üìã Resumen de la Migraci√≥n

Este sistema ha sido migrado de configuraci√≥n hardcodeada a un sistema din√°mico y flexible que permite:

‚úÖ **RAGs Configurables**: Cada tem√°tica tiene su propio archivo de configuraci√≥n
‚úÖ **Agentes Din√°micos**: Los agentes se cargan autom√°ticamente desde configuraci√≥n
‚úÖ **Extensibilidad**: F√°cil adici√≥n de nuevas tem√°ticas y agentes sin modificar c√≥digo
‚úÖ **Recarga Autom√°tica**: Cambios en configuraci√≥n se detectan y aplican autom√°ticamente

## üìÅ Estructura de Configuraci√≥n

```
data/configs/
‚îú‚îÄ‚îÄ rags/                          # Configuraciones de RAG por tem√°tica
‚îÇ   ‚îú‚îÄ‚îÄ plants.yaml               # Informaci√≥n general de plantas
‚îÇ   ‚îú‚îÄ‚îÄ pathology.yaml            # Patolog√≠as y enfermedades
‚îÇ   ‚îú‚îÄ‚îÄ general.yaml              # Conocimiento general
‚îÇ   ‚îú‚îÄ‚îÄ eco_agriculture.yaml      # Agricultura ecol√≥gica (ejemplo)
‚îÇ   ‚îî‚îÄ‚îÄ urban_gardening.yaml      # Jardiner√≠a urbana (ejemplo)
‚îú‚îÄ‚îÄ agents.yaml                   # Configuraci√≥n de todos los agentes
‚îî‚îÄ‚îÄ custom/                       # Configuraciones personalizadas

agentragmcp/custom_agents/         # Agentes personalizados
‚îú‚îÄ‚îÄ eco_agriculture_agent.py      # Ejemplo de agente personalizado
‚îî‚îÄ‚îÄ __init__.py
```

## üöÄ C√≥mo A√±adir Nuevos RAGs

### 1. Crear Configuraci√≥n RAG

Crea un archivo `mi_nueva_tematica.yaml` en `data/configs/rags/`:

```yaml
display_name: "Mi Nueva Tem√°tica"
description: "Descripci√≥n de la tem√°tica"
enabled: true
priority: 1

vectorstore:
  type: "chroma"
  path: "./data/vectorstores/mi_nueva_tematica"
  collection_name: "mi_nueva_tematica_collection"
  chunk_size: 1000
  chunk_overlap: 200

retrieval:
  search_type: "mmr"
  k: 5
  lambda_mult: 0.7

system_prompt: |
  Eres un especialista en [tu tem√°tica].
  
  **Especialidades:**
  - Lista tus especialidades
  
  {{context}}

categories: ["categoria1", "categoria2"]
keywords:
  primary: ["palabra1", "palabra2"]
  secondary: ["palabra3", "palabra4"]

source_paths: ["./data/documents/mi_nueva_tematica"]
```

### 2. A√±adir Documentos

- Crea directorio: `data/documents/mi_nueva_tematica/`
- A√±ade documentos en formato `.txt`, `.pdf`, `.md`
- Ejecuta script de procesamiento para crear vectorstore

### 3. El Sistema se Encarga del Resto

El sistema detectar√° autom√°ticamente la nueva configuraci√≥n y cargar√° el RAG.

## ü§ñ C√≥mo A√±adir Nuevos Agentes

### 1. Agente Gen√©rico (Solo Configuraci√≥n)

A√±ade a `data/configs/agents.yaml`:

```yaml
agents:
  mi_agente:
    description: "Descripci√≥n del agente"
    class: "GenericRAGAgent"  # Usa agente gen√©rico
    topics: ["mi_nueva_tematica"]
    enabled: true
    priority: 2
    config:
      primary_keywords: ["palabra1", "palabra2"]
      patterns: ["patr√≥n.*regex"]
      target_species: ["Especie espec√≠fica"]
    thresholds:
      keyword_weight: 0.4
      pattern_weight: 0.3
```

### 2. Agente Personalizado (Con C√≥digo)

1. Crea archivo en `agentragmcp/custom_agents/mi_agente.py`
2. Hereda de `DynamicAgent`
3. Implementa l√≥gica espec√≠fica
4. Actualiza configuraci√≥n en `agents.yaml`

## üîß Comandos √ötiles

```bash
# Migrar sistema completo
python scripts/migration_dinamic.py

# Validar configuraciones
python -c "from agentragmcp.core.dynamic_config import config_manager; config_manager.validate_all()"

# Recargar configuraciones
python -c "from agentragmcp.core.dynamic_config import config_manager; config_manager.reload_if_changed()"

# Listar configuraciones disponibles
python -c "from agentragmcp.core.dynamic_config import config_manager; print(config_manager.list_available_configs())"
```

## üìù Ejemplos Incluidos

La migraci√≥n incluye configuraciones de ejemplo para:

- **üå± Plants**: Informaci√≥n general de plantas
- **ü¶† Pathology**: Diagn√≥stico y tratamiento de enfermedades
- **üìö General**: Conocimiento educativo de bot√°nica
- **üåø Eco Agriculture**: Agricultura ecol√≥gica y sostenible
- **üèôÔ∏è Urban Gardening**: Jardiner√≠a en espacios urbanos

## üõ†Ô∏è Desarrollo y Personalizaci√≥n

### Estructura de un Agente Personalizado

```python
from agentragmcp.api.app.agents.dinamic_agent import DynamicAgent

class MiAgentePersonalizado(DynamicAgent):
    def __init__(self, config, rag_service):
        super().__init__("mi_tematica", config, rag_service)
    
    def calculate_confidence(self, question: str) -> float:
        # L√≥gica personalizada de confianza
        confidence = super().calculate_confidence(question)
        # A√±adir bonificaciones espec√≠ficas
        return confidence
    
    def enhance_response(self, response: str, question: str) -> str:
        # Mejoras espec√≠ficas a las respuestas
        return enhanced_response
```

### Configuraci√≥n Avanzada de RAG

```yaml
# Configuraci√≥n avanzada con m√∫ltiples fuentes
vectorstore:
  type: "chroma"
  path: "./data/vectorstores/mi_rag"
  collection_name: "mi_collection"
  chunk_size: 1200
  chunk_overlap: 300
  embedding_model: "llama3.1"

retrieval:
  search_type: "mmr"
  k: 6
  fetch_k: 20
  lambda_mult: 0.8
  score_threshold: 0.4

# Configuraciones personalizadas
custom_settings:
  use_metadata_filter: true
  include_source_info: true
  max_context_length: 4000
  response_language: "es"
```

## üìä Monitoreo y M√©tricas

El sistema incluye capacidades de monitoreo:

- **Carga de configuraciones**: Tiempo y √©xito de carga
- **Uso de agentes**: Frecuencia de selecci√≥n por agente
- **Performance de RAGs**: Tiempo de respuesta por tem√°tica
- **Detecci√≥n de cambios**: Recargas autom√°ticas de configuraci√≥n

## üîÑ Proceso de Migraci√≥n Completado

La migraci√≥n autom√°tica ha:

1. ‚úÖ Creado estructura de directorios
2. ‚úÖ Extra√≠do configuraciones hardcodeadas
3. ‚úÖ Generado archivos YAML de configuraci√≥n
4. ‚úÖ Creado agentes personalizados de ejemplo
5. ‚úÖ A√±adido documentos de ejemplo
6. ‚úÖ Validado la migraci√≥n
7. ‚úÖ Generado esta documentaci√≥n

## üìû Soporte

Para m√°s informaci√≥n sobre el sistema din√°mico:
- Revisa los archivos de configuraci√≥n en `data/configs/`
- Consulta los ejemplos en `agentragmcp/custom_agents/`
- Ejecuta las validaciones incluidas
- Revisa los logs del sistema para debugging

---

**¬°El sistema AgentRagMCP ahora es completamente din√°mico y extensible!** üéâ
"""
        
        # Guardar documentaci√≥n
        readme_file = self.base_path / "MIGRATION_README.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        # Crear archivo de configuraci√≥n de ejemplo
        example_config = """# Ejemplo de configuraci√≥n personalizada

display_name: "Mi RAG Personalizado"
description: "Ejemplo de c√≥mo crear un RAG personalizado"
enabled: true
priority: 10

vectorstore:
  type: "chroma"
  path: "./data/vectorstores/mi_rag_personalizado"
  collection_name: "mi_collection"
  chunk_size: 1000
  chunk_overlap: 200

retrieval:
  search_type: "mmr"
  k: 5
  lambda_mult: 0.7

system_prompt: |
  Eres un especialista en [tu √°rea espec√≠fica].
  
  Proporciona informaci√≥n precisa y √∫til sobre [tu dominio].
  
  {context}

categories: ["categoria1", "categoria2"]
keywords:
  primary: ["palabra_clave1", "palabra_clave2"]
  secondary: ["t√©rmino1", "t√©rmino2"]

source_paths: ["./data/documents/mi_rag_personalizado"]

custom_settings:
  mi_configuracion: "valor"
  otra_opcion: true
"""
        
        example_file = self.config_manager.config_base_path / "custom" / "ejemplo_rag.yaml"
        with open(example_file, 'w', encoding='utf-8') as f:
            f.write(example_config)
        
        print(f"   üìñ MIGRATION_README.md")
        print(f"   üìã ejemplo_rag.yaml")
    
    def cleanup_old_files(self):
        """Limpia archivos obsoletos despu√©s de la migraci√≥n"""
        print("   üóÇÔ∏è Creando backups de archivos originales...")
        
        # Archivos que podr√≠an necesitar backup
        files_to_backup = [
            "agentragmcp/core/config.py",
            "agentragmcp/api/app/agents/base_agent.py",
            "agentragmcp/api/app/agents/plants_agent.py",
            "agentragmcp/api/app/agents/pathology_agent.py",
            "agentragmcp/api/app/agents/general_agent.py",
            "agentragmcp/api/app/services/rag_service.py",
            "agentragmcp/api/app/services/agent_service.py"
        ]
        
        backup_dir = self.base_path / "backups" / "migration"
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        backed_up = []
        for file_path in files_to_backup:
            source_file = self.base_path / file_path
            if source_file.exists():
                # Crear estructura de directorios en backup
                relative_path = Path(file_path)
                backup_file = backup_dir / relative_path
                backup_file.parent.mkdir(parents=True, exist_ok=True)
                
                # Copiar archivo
                shutil.copy2(source_file, backup_file)
                backed_up.append(file_path)
        
        if backed_up:
            print(f"   üì¶ {len(backed_up)} archivos respaldados en backups/migration/")
        
        # Crear archivo de registro de migraci√≥n
        migration_log = {
            "migration_date": "2024-12-19",
            "migrated_from": "hardcoded_config",
            "migrated_to": "dynamic_config",
            "backed_up_files": backed_up,
            "new_structure": {
                "configs": "data/configs/",
                "custom_agents": "agentragmcp/custom_agents/",
                "documentation": "MIGRATION_README.md"
            }
        }
        
        log_file = backup_dir / "migration_log.json"
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(migration_log, f, indent=2, ensure_ascii=False)
        
        print(f"   üìã Log de migraci√≥n guardado en backups/migration/migration_log.json")

def main():
    """Funci√≥n principal del script de migraci√≥n"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Migraci√≥n de AgentRagMCP a sistema din√°mico")
    parser.add_argument("--base-path", type=str, help="Directorio base del proyecto")
    parser.add_argument("--dry-run", action="store_true", help="Simular migraci√≥n sin hacer cambios")
    parser.add_argument("--verbose", "-v", action="store_true", help="Salida detallada")
    
    args = parser.parse_args()
    
    try:
        migrator = AgentRagMCPMigrator(args.base_path)
        
        if args.dry_run:
            print("üß™ MODO DRY-RUN - No se realizar√°n cambios")
            print("La migraci√≥n crear√≠a:")
            print("- Estructura de directorios en data/configs/")
            print("- Configuraciones RAG individuales")
            print("- Configuraciones de agentes")
            print("- Agentes personalizados de ejemplo")
            print("- Documentaci√≥n de migraci√≥n")
        else:
            migrator.migrate_full_system()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Migraci√≥n interrumpida por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error durante la migraci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

